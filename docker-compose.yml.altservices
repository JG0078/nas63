# start up with 'docker-compose up -d' to start in background
# update images with 'docker-compose pull'
# this assumes that you have a sibling directory to this file called 'config' that contains all of the config for these services
# you can reference 'sabnzbd' 'radarr' or 'sonarr' from inside the containers (in the apps) to reference the other containers. no need to deal with IPs or hostnames
# remember that docker is isolated from the rest of your filesystem. you need to add volumes to the entries
# in order to give the processes access to them. so if you have multiple target directories for TV or Movies,
# then make sure you add each one that you want radarr/sonarr/sabnzbd to see.

version: '3'
services:
  sabnzbd:
    image: linuxserver/sabnzbd
    ports:
      - "8080:8080" # port mapping
    volumes:
      - "./config/sabnzbd:/config" # sab config directory
      - "/storage/Downloads/complete:/downloads" # completed directory for downloads. this contains the category directories
      - "/downloads/incomplete:/incomplete-downloads" # "temp" directory for downloads
    environment:
      TZ: UTC
      PUID: 501 # set to UID of your user
      PGID: 501 # set to GID of your user

  radarr:
    image: linuxserver/radarr
    ports:
      - "7878:7878" # port mapping
    volumes:
      - "./config/radarr:/config" # config directory for radarr
      - "/storage/Downloads/complete:/downloads" # completed downloads directory from sab
      - "/storage/Movies:/storage/Movies" # where radarr will copy your movies. add as many of these as you need
    environment:
      TZ: UTC
      PUID: 501 # set this to the UID of your user
      PGID: 501 # set this to the GID of your user

  sonarr:
    image: linuxserver/sonarr
    ports:
      - "8989:8989" # port mapping
    volumes:
      - "./config/sonarr:/config" # sonarr config dir
      - "/storage/Downloads/complete:/downloads" # your completed downloads directory from sab
      - "/storage/TV:/storage/TV" # where it will copy your files when done. add as many of these as you need
    environment:
      TZ: UTC
      PUID: 501 # set this to the UID of your user
      PGID: 501 # set this to the GID of your user



#transmission:
#  image: lscr.io/linuxserver/transmission
#  container_name: transmission
#  environment:
#    - PUID=${PUID} # User id
#    - PGID=${PGID} # Group id
#    - TZ=${TZ} # Your current timezone
#  volumes:
#    - ${ROOT}/nas63/transmission:/config # Change this to your docker config folder
#    - ${ROOT}/nas63/library/downloads:/downloads # Change this to your download folder
#  ports:
#    - 9091:9091 # Web UI port
#    - 51413:51413 # Torrent port (TCP)
#    - 51413:51413/udp # Torrent port (UDP)
#  restart: unless-stopped # This makes sure that the application restarts when it crashes



#
# Grafana
# ADMIN_USER=admin  
# ADMIN_PASSWORD=admin
#

#version: '3'
#services:
#  plex:
#    image: linuxserver/plex:latest
#    container_name: plex
#    restart: always
#    ports:
#      - "32400:32400"
#      #- "1900:1900"
#      #- "3005:3005"
#      #- "5353:5353"
#      #- "8324:8324"
#      #- "32410:32410"
#      #- "32412:32412"
#      #- "32413:32413"
#      #- "32414:32414"
#      #- "32469:32469"
##    networks:
##      - plexnet
#    environment:
#      - PGID=1000
#      - PUID=1000
#      - TZ=Americas/Toronto
#    volumes:
#      - ${CONFIG}/plex-config:/config
#      - ${MOUNT_POINT}/plex:/data



#  grafana:
#    image: grafana/grafana:6.7.2
#    container_name: grafana
#    volumes:
#      - ${CONFIG}/grafana-config/data:/var/lib/grafana
#      - ${CONFIG}/grafana-config/provisioning:/etc/grafana/provisioning
#    environment:
#      - GF_SECURITY_ADMIN_USER=${ADMIN_USER}
#      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
#      - GF_USERS_ALLOW_SIGN_UP=false
#    restart: unless-stopped
#    ports:
#      - "3000:3000"
#    #expose:
#    #  - 3000
#    #networks:
#    #  - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"

#networks:
#  plexnet:
#    driver: bridge
